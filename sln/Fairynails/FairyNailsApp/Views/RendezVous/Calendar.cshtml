@using Microsoft.AspNetCore.Identity
@using NetExtension;
@inject SignInManager<ApplicationUser> _signInManager
@inject UserManager<ApplicationUser> _userManager
@model CalendarViewModel
@{
    ViewData["Title"] = "Agenda";
}

@{
    var user = await _userManager.FindByIdAsync(_userManager.GetUserId(User));
    var userName = user.Name;
    var userFirstName = user.FirstName;
    var userId = user.Id;
}

@section Styles
{
    <link rel="stylesheet" href="~/css/rendezvous.css" />
}


<div class="container">
    <div class="row">
        <div class="col-12">
            @{
                if (TempData["success"] != null)
                {
                    <p class="alert alert-success">@TempData["success"]</p>
                }
                if (TempData["alert"] != null)
                {
                    <p class="alert alert-danger">@TempData["alert"]</p>
                }
            }
        </div>
    </div>
    <div id="calendar">
        @{String monthName = Model.FirstDayOfMonth.ToString("MMMM").FirstLetterToUppercase(); }
        <div class="row mb-4">
            <div class="col-12 d-flex justify-content-center align-items-center">
                <i class="far fa-arrow-alt-circle-left mr-4 changeMonth" id="monthDown"></i> <h1 class="text-center">@monthName @Model.FirstDayOfMonth.Year</h1> <i class="far fa-arrow-alt-circle-right ml-4 changeMonth" id="monthUp"></i>
            </div>
        </div>
        <div class="row">
            <div class="col-12">
                <div class="calendar">
                    @{
                        Int32 numberOfDay = DateTime.DaysInMonth(Model.FirstDayOfMonth.Year, Model.FirstDayOfMonth.Month);
                        DateTime day = Model.FirstDayOfMonth;
                        for (int i = 1; i <= numberOfDay; i++)
                        {
                            Double rowDouble = day.Day / 7f;
                            Int32 row = (int)Math.Ceiling(rowDouble);
                            Int32 col = (day.Day - (7 * (row - 1)));
                            String off = day.DayOfWeek == DayOfWeek.Sunday ? "off" : "";

                            <div class="day @off" style="grid-row: @row; grid-column: @col" data-date="@day.Day-@day.Month">
                                <p class="text-center">@day.ToString("dddd") @day.Day</p>
                                @if (day.DayOfWeek != DayOfWeek.Sunday && new DateTime(Model.FirstDayOfMonth.Year, Model.FirstDayOfMonth.Month, i).CompareTo(DateTime.Now) > 0)
                                {
                                    <div class="rdv @(Model.UnavaibleTimeCode.Contains($"{day.Year}-{day.Month}-{day.Day}-9") ? "unavaible" : "")" data-code="@($"{day.Year}-{day.Month}-{day.Day}-9")" data-toggle="modal" data-target="#reservations">9h00</div>
                                    <div class="rdv @(Model.UnavaibleTimeCode.Contains($"{day.Year}-{day.Month}-{day.Day}-10") ? "unavaible" : "")" data-code="@($"{day.Year}-{day.Month}-{day.Day}-10")" data-toggle="modal" data-target="#reservations">10h00</div>
                                    <div class="rdv @(Model.UnavaibleTimeCode.Contains($"{day.Year}-{day.Month}-{day.Day}-11") ? "unavaible" : "")" data-code="@($"{day.Year}-{day.Month}-{day.Day}-11")" data-toggle="modal" data-target="#reservations">11h00</div>
                                    <div class="rdv @(Model.UnavaibleTimeCode.Contains($"{day.Year}-{day.Month}-{day.Day}-14") ? "unavaible" : "")" data-code="@($"{day.Year}-{day.Month}-{day.Day}-14")" data-toggle="modal" data-target="#reservations">14h00</div>
                                    <div class="rdv @(Model.UnavaibleTimeCode.Contains($"{day.Year}-{day.Month}-{day.Day}-15") ? "unavaible" : "")" data-code="@($"{day.Year}-{day.Month}-{day.Day}-15")" data-toggle="modal" data-target="#reservations">15h00</div>
                                    <div class="rdv @(Model.UnavaibleTimeCode.Contains($"{day.Year}-{day.Month}-{day.Day}-16") ? "unavaible" : "")" data-code="@($"{day.Year}-{day.Month}-{day.Day}-16")" data-toggle="modal" data-target="#reservations">16h00</div>
                                    <div class="rdv @(Model.UnavaibleTimeCode.Contains($"{day.Year}-{day.Month}-{day.Day}-17") ? "unavaible" : "")" data-code="@($"{day.Year}-{day.Month}-{day.Day}-17")" data-toggle="modal" data-target="#reservations">17h00</div>
                                    <div class="rdv @(Model.UnavaibleTimeCode.Contains($"{day.Year}-{day.Month}-{day.Day}-18") ? "unavaible" : "")" data-code="@($"{day.Year}-{day.Month}-{day.Day}-18")" data-toggle="modal" data-target="#reservations">18h00</div>
                                }
                            </div>

                            day = day.AddDays(1);
                        }
                    }

                </div>
            </div>
        </div>
    </div>
    @*Modal de prise de rdv*@
    <div class="modal fade" id="reservations" tabindex="-1" role="dialog" aria-labelledby="reservationsTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reservationsTitle">Réserver</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form asp-controller="RendezVous" asp-action="SaveRendezVous" method="post" id="inscription" class="p-4">
                        <div class="row">
                            <div class="col-4">
                                <div class="row">
                                    <div class="col-12">
                                        <div class="form-group row">
                                            <label for="name" class="col-sm-4 col-form-label">Nom</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control" id="name" name="name" readonly required value="@userName">
                                            </div>
                                        </div>
                                        <div class="form-group row">
                                            <label for="firstname" class="col-sm-4 col-form-label">Prénom</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control" id="firstname" name="firstname" readonly required value="@userFirstName">
                                            </div>
                                        </div>
                                        <input asp-for="IdClient" type="hidden" value="@userId">
                                        <input id="dateCodeInput" type="hidden" asp-for="DateCode" />
                                        <div class="form-group row">
                                            <label for="date" class="col-sm-4 col-form-label">Date</label>
                                            <div class="col-sm-8">
                                                <input type="text" class="form-control" id="date" name="date" value="" readonly required>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="row">
                                    <div class="col-12">
                                        <div class="form-group row">
                                            <label for="comments" class="col-12 col-form-label text-center">Commentaires</label>
                                            <div class="col-12">
                                                <textarea name="comments" style="width:100%" rows="10"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-8">
                                <div class="row">
                                    <div class="col-12">
                                        <fieldset class="form-group">
                                            <legend>Prestations souhaités</legend>
                                            <div class="row" style="overflow-y:auto">
                                                <table class="col-10 offset-1">
                                                    <thead>
                                                        <tr>
                                                            <th>Prestation</th>
                                                            <th>Prix</th>
                                                            <th>Durée</th>
                                                            <th>Selection</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{
                                                            for (int i = 0; i < Model.Prestations.Count; i++)
                                                            {
                                                                <tr>
                                                                    <td>
                                                                        <label class="form-check-label" asp-for="Prestations[i].IsChosen">@Model.Prestations[i].Nom</label>
                                                                    </td>
                                                                    <td>@Math.Round(Model.Prestations[i].Prix, 2) €</td>
                                                                    <td>@Model.Prestations[i].Duree</td>
                                                                    <td>
                                                                        <input class="form-check-input" type="checkbox" asp-for="Prestations[i].IsChosen" />
                                                                        <input type="hidden" asp-for="Prestations[i].IdPrestation" value="@Model.Prestations[i].IdPrestation" />
                                                                    </td>
                                                                </tr>

                                                            }
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </fieldset>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <div class="col-12 d-flex justify-content-center">
                                <button class="button-pink" type="submit" id="reservate">Réserver</button>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Fermer</button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script>

        insertDateOnModalInput()

        function insertDateOnModalInput() {
            let dateEnable = document.querySelectorAll(".rdv");
            dateEnable.forEach(item => item.addEventListener("click", () => {
                let dateCode = item.dataset.code;
                let dateCodeInput = document.getElementById("dateCodeInput");
                dateCodeInput.value = dateCode;

                let dateInput = document.getElementById("date");
                let splitDateCode = dateCode.split("-");
                dateInput.value = `${splitDateCode[2]}/${splitDateCode[1]}/${splitDateCode[0]} à ${splitDateCode[3]}h`;
            }));
        }

        // ******  Changement de mois  ***** //

        let year = @(Model.FirstDayOfMonth.Year);
        let monthNumberDown = @((Model.FirstDayOfMonth.Month) == 1 ? 12 : Model.FirstDayOfMonth.Month-1) ;
        let monthNumberUp = @((Model.FirstDayOfMonth.Month) == 12 ? 1 : Model.FirstDayOfMonth.Month+1) ;

        changeMonth();

        function changeMonth() {
            console.log(monthNumberDown, monthNumberUp,year)
            let changeMonthButtons = document.querySelectorAll(".changeMonth");
            let calendar = document.getElementById("calendar");

            changeMonthButtons.forEach((element) => element.addEventListener("click", async function () {
                let param = "";
                if (this.getAttribute("id") == "monthDown") {
                    if (monthNumberDown == 12) {
                        year--;
                    }
                    param = `month=${monthNumberDown}&year=${year}`;
                }
                else {
                    console.log(monthNumberUp,year);
                    if (monthNumberUp == 1) {
                        year++;
                    }
                    param = `month=${monthNumberUp}&year=${year}`;
                }
                let response = await fetch('@Url.Action("CalendarChangeMonth", "Ajax")', {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/x-www-form-urlencoded",
                    },
                    body: param,
                });
                let responseData = await response.text();
                if (response.ok) {
                    calendar.innerHTML = responseData;
                    if (this.getAttribute("id") == "monthDown") {
                        monthNumberUp = monthNumberUp === 1 ? 12 : monthNumberUp - 1;
                        monthNumberDown = monthNumberDown === 1 ? 12 : monthNumberDown - 1;
                    }
                    else {
                        monthNumberDown = monthNumberDown === 12 ? 1 : monthNumberDown + 1;
                        monthNumberUp = monthNumberUp === 12 ? 1 : monthNumberUp + 1;
                    }
                    insertDateOnModalInput()
                    changeMonth();
                }
                else {
                    console.log('erreur');
                }
            }));
        }
    </script>
}